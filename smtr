#!/usr/bin/env ruby
#
#    SMTR—a tr like program for StarMade™ templates
#    Copyright (c) 2014 Sebastian Dufner
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with this program.  If not, see <http://www.gnu.org/licenses/>.

require 'delegate'
require 'set'

require 'trollop'

class IO
  def read_many(*args)
    length = args.reduce {|l, n| l + n}
    unpack_string = args.reduce('') do |result, n_bytes|
      s = case n_bytes
        when 1 then 'C'
        when 2 then 'S>'
        when 4 then 'i>'
        when 8 then 'q>'
        else fail "Incompatible integer length: #{n_bytes}"
      end

      result.concat s
    end

    read(length).unpack(unpack_string)
  end

  def write_many(args)
    pack_string = args.values.flatten.reduce('') do |result, n_bytes|
      s = case n_bytes
        when 1 then 'C'
        when 2 then 'S>'
        when 4 then 'i>'
        when 8 then 'q>'
        else fail "Incompatible integer length: #{n_bytes}"
      end

      result.concat s
    end

    write args.keys.flatten.pack(pack_string)
  end
end

module SMTR
  VERSION = '1.0'

  class App
    def self.create(set1, set2, complement: false, truncate: false, smart: false)
      table = TrTable.compile(set1, set2,
            complement: complement, truncate: truncate, smart: smart)
      new(table)
    end

    def initialize(tr_table)
      @tr_table = tr_table
    end

    attr_reader :tr_table
    attr_writer :tr_table

    def tr(input = $stdin, output = $stdout)
      template = Template.deserialize(input)
      template.blocks.each do |block|
        block.id = @tr_table[block.id]
        block.hp = 0x1ff
      end
      template.serialize(output)
    end
  end

  class TrTable
    Valid_Block_IDs = Set.new(
          [
            6, 16, 1, 65, 63, 8, 7, 2, 3, 14, 15, 22, 24, 38, 32, 46, 40, 54,
            48, 4, 56, 30, 39, 47, 55, 62, 64, 112, 113, 114, 120, 121, 122,
            123, 80, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,
            140, 141, 72, 73, 74, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92,
            93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107,
            108, 109, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152,
            153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165,
            166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178,
            179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191,
            192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204,
            205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217,
            218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230,
            231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243,
            244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256,
            257, 258, 259, 260, 261, 262, 272, 273, 274, 275, 276, 277, 278,
            279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291,
            292, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342,
            343, 344, 345, 346, 347, 329, 330, 366, 367, 368, 5, 69, 70, 75,
            76, 77, 78, 79, 81, 426, 293, 294, 295, 296, 297, 298, 299, 300,
            301, 427, 302, 303, 304, 305, 306, 307, 308, 309, 310, 428, 357,
            385, 386, 387, 388, 389, 390, 391, 392, 403, 429, 348, 393, 394,
            395, 396, 397, 398, 399, 400, 404, 430, 263, 264, 265, 266, 267,
            268, 269, 270, 271, 431, 311, 312, 313, 314, 315, 316, 317, 318,
            319, 432, 320, 321, 322, 323, 324, 325, 326, 327, 328, 433, 369,
            370, 371, 372, 373, 374, 375, 376, 401, 434, 377, 378, 379, 380,
            381, 382, 383, 384, 402, 435, 358, 359, 360, 361, 362, 363, 364,
            365, 349, 350, 351, 352, 353, 354, 355, 356, 405, 406, 407, 408,
            409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421,
            422, 423, 424, 425, 436, 437, 438, 439, 440, 441, 442, 443, 444,
            445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457,
            458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470,
            471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483,
            484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496,
            497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509,
            510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522,
            523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535,
            536, 537, 538, 539, 540, 541, 542, 543, 544, 545
          ])

    def self.compile(set1, set2, complement: false, truncate: false, smart: false)
      fail 'Parse error in SET1' unless
        set1 =~ /\d+(\s*-\s*\d+)?(\s*,\s*\d+(\s*-\s*\d+)?)*/
      fail 'Parse error in SET2' unless
        set2 =~ /\d+(\s*-\s*\d+)?(\s*,\s*\d+(\s*-\s*\d+)?)*/

      smart = smart || complement

      (set1 = compile_single(set1, smart)).flatten!
      (set2 = compile_single(set2, smart)).flatten!

      set1 = (Valid_Block_IDs - set1).to_a if complement

      fail 'SET1 is empty' if set1.empty?
      fail 'SET2 is empty' if set2.empty?

      if truncate then  truncate_set(set1, set2.size)
      else              truncate_set(set2, set1.size)
      end

      TrTable.new Hash[set1.zip(set2)]
    end

    def self.compile_single(set, smart)
      set = set.scan(/\d+(?:\s*-\s*\d+)?/).map! do |entry|
        entry = entry.scan(/\d+/)
        if entry.size == 1
          entry[0].to_i
        else
          entry[0].to_i..entry[1].to_i
        end
      end

      set.map! do |entry|
        case entry
        when Range
          return entry.to_a if smart
          entry.find_all {|id| Valid_Block_IDs.include? id}
        else
          fail "Invalid block id: #{entry}" if
            smart && !Valid_Block_IDs.include?(id)
          entry
        end
      end
    end
    private_class_method :compile_single

    def self.truncate_set(set, length)
      if set.size > length
        set.slice!(0, length)
      else
        last = set.last
        (length - set.size).times {set << last}
      end
    end
    private_class_method :truncate_set

    def initialize(table = {})
      @table = table
    end

    def [](block)
      @table[block] || block
    end
  end

  class Template
    class Header
      def self.deserialize(input)
        new(*input.read_many(1, 4, 4, 4, 4, 4, 4))
      end

      def initialize(version, u1, u2, u3, u4, u5, u6)
        @version, @u1, @u2, @u3, @u4, @u5, @u6 = version, u1, u2, u3, u4, u5, u6
      end
      attr_accessor :version, :u1, :u2, :u3, :u4, :u5, :u6

      def serialize(output)
        output.write_many([version, u1, u2, u3, u4, u5, u6] =>
                [1, 4, 4, 4, 4, 4, 4])
      end
    end

    class Blocks < SimpleDelegator
      def self.deserialize(input)
        length = input.read_many(4)[0]

        new length.times.map {Block.deserialize(input)}
      end

      def serialize(output)
        output.write_many(size => 4)
        each {|block| block.serialize(output)}
      end
    end

    class Links < SimpleDelegator
      def self.deserialize(input)
        length = input.read_many(4)[0]

        new length.times.map {Link.deserialize(input)}
      end

      def serialize(output)
        output.write_many(size => 4)
        each {|link| link.serialize(output)}
      end
    end

    class Block
      def self.deserialize(input)
        new(*input.read_many(4, 4, 4, 1, 1, 1))
      end

      def initialize(x, y, z, b1, b2, b3)
        @x, @y, @z = x, y, z

        @block = (b1 << 16) | (b2 << 8) | b3
      end
      attr_accessor :x, :y, :z
      attr_reader :block

      def id
        @block & 0x7ff
      end

      def id=(newid)
        @block = (@block >> 11 << 11) | (newid & 0x7ff)
      end

      def hp
        (@block >> 11) & 0xff
      end

      def hp=(newhp)
        @block = (@block >> 19 << 19) | (@block & 0x7ff) | (newhp & 0xff) << 11
      end

      def serialize(output)
        output.write_many(
              [
                x, y, z,
                (block >> 16 & 0xff),
                (block >> 8 & 0xff),
                (block & 0xff)
              ] => [4, 4, 4, 1, 1, 1])
      end
    end

    class Link
      def self.deserialize(input)
        new(*input.read_many(2, 2, 2, 2, 4, 2, 2, 2, 2))
      end

      def initialize(u1, z_master, y_master, x_master,
            u2, u3, z_slave, y_slave, x_slave)
        @u1, @z_master, @y_master, @x_master, @u2, @u3, @z_slave, @y_slave,
            @x_slave =
          u1, z_master, y_master, x_master, u2, u3, z_slave, y_slave, x_slave
      end
      attr_accessor :u1, :z_master, :y_master, :x_master, :u2, :u3, :z_slave,
          :y_slave, :x_slave

      def serialize(output)
        output.write_many(
              [
                u1, z_master, y_master, x_master,
                u2, u3, z_slave, y_slave, x_slave
              ] => [2, 2, 2, 2, 4, 2, 2, 2, 2])
      end
    end

    def self.deserialize(input)
      new(Header.deserialize(input), Blocks.deserialize(input),
            Links.deserialize(input))
    end

    def initialize(header, blocks, links)
      @header, @blocks, @links = header, blocks, links
    end
    attr_accessor :header, :blocks, :links

    def serialize(output)
      header.serialize(output)
      blocks.serialize(output)
      links.serialize(output)
    end
  end
end

options = Trollop.options do
  version "smtr #{SMTR::VERSION}\nCopyright (C) 2014 Sebastian Dufner"
  banner <<-EOF
This program comes with ABSOLUTELY NO WARRANTY; see the sources for details.
This is free software, and you are welcome to redistribute it under the terms of the GPLv3.

Usage: smtr [OPTION]... SET1 SET2

Translate blocks in a StarMade™ template. Supports input pipes as well as files.

  EOF

  opt :complement, 'Use the complement of SET1. Enables --smart-mode'
  opt :'truncate-set1', 'Truncate SET1 to the length of SET2'
  opt :'input-file', 'Read from input file <s> instead of standard input',
      type: String
  opt :'output-file', 'Write to output file <s> instead of standard output',
      type: String
  opt :'smart-mode',
      'Use smart mode. Restricts the SETs to blocks that are actually in the game. Note: Utilizes a hardcoded block table that may become outdated with a game update.'
  #~ opt :verbose, 'Use verbose mode', short: 'V'
end

Trollop.die 'Missing operand' if ARGV.size == 0
Trollop.die 'Missing operand; block deletion is currently unsupported' if
  ARGV.size == 1
Trollop.die 'Too many arguments' if ARGV.size > 2
Trollop.die 'No in-place editing allowed' if
  options[:'input-file'] && options[:'output-file'] &&
    File.absolute_path(options[:'input-file']) ==
        File.absolute_path(options[:'output-file'])

input, output = $stdin, $stdout
input = File.open(options[:'input-file'], 'r') if options[:'input-file']
output = File.open(options[:'output-file'], 'w') if options[:'output-file']

SMTR::App.create(ARGV[0], ARGV[1],
      complement: options[:complement],
      truncate: options[:'truncate-set1'],
      smart: options[:'smart-mode'])
  .tr(input, output)
